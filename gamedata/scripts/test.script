tbl_arts = {
	[ "lvl1" ] = { 			-- 1 УРОВЕНЬ --
		"af_medusa", "af_vyvert", "af_blood", "af_electra_sparkler",
		"af_drops", "af_ameba_slime", "af_rusty_thorn"
	},
	[ "lvl2" ] = { 			-- 2 УРОВЕНЬ --
		"af_cristal_flower", "af_gravi", "af_mincer_meat", "af_electra_flash",
		"af_fireball", "af_ameba_slug",	"af_rusty_kristall"
	},
	[ "lvl3" ] = { 			-- 3 УРОВЕНЬ --
		"af_cristall", "af_electra_moonlight", "af_night_star",	"af_gold_fish",
		"af_rusty_sea-urchin", "af_soul", "af_ameba_mica"
	},
	[ "lvl4" ] = { 			-- ПУСТЫШКИ --
		"af_dummy_spring", "af_dummy_dummy", "af_dummy_battery",
		"af_dummy_pellicle", "af_dummy_glassbeads", "af_dummy_kolobok"
	},
	[ "lvl5" ] = { 			-- МОДИФИКАТЫ --
		"af_armor_1", "af_babka_1",	"af_cry_1",	"af_dik_1", "af_dummy_simbion",
		"af_kol_1",	"af_pudd_1", "af_spirit_1",	"af_dummy_buliz"
	},
	[ "lvl6" ] = { 			-- МЕЗОМОДИФИКАТЫ --
		"af_armor_2", "af_babka_2",	"af_cry_2",	"af_dik_2",
		"af_kol_2",	"af_pudd_2", "af_spirit_2"
	},
	[ "lvl7" ] = { 			-- ГИПЕРМОДИФИКАТЫ --
		"af_armor_3", "af_babka_3",	"af_cry_3",	"af_dik_3",
		"af_kol_3",	"af_pudd_3", "af_spirit_3"
	},
	[ "lvl8" ] = { 			-- АБСОЛЮТЫ --
		"af_armor_4", "af_babka_4",	"af_cry_4",	"af_dik_4",
		"af_kol_4",	"af_pudd_4", "af_spirit_4"
	},
	[ "lvl9" ] = { 			-- КАПСУЛЫ 3ур --
		"af_night_star_capsule", "af_gold_fish_capsule", "af_cristall_capsule", "af_soul_capsule",
		"af_electra_moonlight_capsule",	"af_rusty_sea-urchin_capsule", "af_ameba_mica_capsule"
	},
	[ "lvl10" ] = { 		-- КАПСУЛЫ ПУСТЫШКИ --
		"af_dummy_spring_capsule", "af_dummy_dummy_capsule", "af_dummy_battery_capsule",
		"af_dummy_pellicle_capsule", "af_dummy_kolobok_capsule", "af_dummy_glassbeads_capsule"
	},
	[ "lvl11" ] = { 		-- УНИКИ --
		"af_dummy_green_medusa", "af_dummy_green_vyvert", "af_dummy_green_blood",
		"af_red_dummy_spring", "af_red_dummy_battery", "af_red_dummy_pellicle",
		"af_medus_new",
		"af_crist_new",
		"af_flower_new",
		"af_star_new",
		"af_glass_new",
		"af_dummy_fire",
		"af_sul_new"
	}
}

tbl_recipt = {
	[ "lvl1" ] = { 			-- 1 УРОВЕНЬ --
		"info_artmod_electra_sparkler_mosquito_bald",		--  1 Бенгальский огонь из трамплина  	-- Юрик за мп5
		"info_artmod_rusty_kristall_gravi_zone",			--  2 Кровь камня из воронки			-- Неумеха за броник
		"info_artmod_drops_mincer",							--  3 Капля из карусели 				-- Записка у Кабана
		"info_artmod_rusty_thorn_buzz",						--  4 Колючка из холодца              	-- папка в вагоне на Агро
		"info_artmod_ameba_slime_zharka",					--  5 Слизь из жарки                  	-- Крот за ПДА
		"info_artmod_vyvert_buzz",							--  6 Выверт из холодца				 	-- Серый за помощь
		"info_artmod_medusa_galant"							--  7 Медуза из электры				 	-- Крысюк за помощь
	},
	[ "lvl2" ] = { 			-- 2 УРОВЕНЬ --
		"info_artmod_mincer_meat_mosquito_bald",			--  8 Ломоть мяса из трамплина 		 	-- Толик за хвосты
		"info_artmod_gravi_gravi_zone",						--  9 Грави из воронки 				 	-- Петруха за ТОЗ
		"info_artmod_cristall_flower_mincer",				-- 10 Каменный цветок из карусели	 	-- Шустрый за медузу
		"info_artmod_rusty_kristall_buzz",					-- 11 Кристальная колючка из холодца  	-- Кузя за 10 водки
		"info_artmod_electra_flash_zharka",					-- 12 Вспышка из жарки 				 	-- Тоннель с электрами
		"info_artmod_fireball_galant",						-- 13 Огненный шар из электры 		 	-- Лис за аптечки
		"info_artmod_cristall_flower_galant",				-- 14 Каменный цветок из электры      	-- Пличко за кулемёт
		"info_artmod_ameba_slug_mosquito_bald",				-- 15 Слизняк из трамплина 			 	-- Прапор за глаза
		"info_artmod_electra_flash_gravi_zone",				-- 16 Вспышка из воронки 			 	-- Прапор за жвалы
		"info_artmod_rusty_kristall_mincer",				-- 17 Кристальная колючка из карусели 	-- Переход Кордон-Кишка
		"info_artmod_fireball_buzz",						-- 18 Огненный шар из холодца         	-- Монгол/Волкодав/пда Волкодава
		"info_artmod_ameba_slug_ice",						-- 19 Слизняк из снежки               	-- Пуля за Любера
		"info_artmod_gravi_zharka",							-- 20 Грави из жарки 				 	-- Петренко за гаус??
		"info_artmod_blood_ice"								-- 21 Ломоть мяса из снежки 			-- Кочерга на ДТ??
	},
	[ "lvl3" ] = { 			-- 3 УРОВЕНЬ --
		"info_artmod_ameba_mica_galant",					-- 22 Слюда из электры 					-- ПДА с Радара, Доцент
		"info_artmod_cristall_mosquito_bald",				-- 23 Кристалл из трамплина				-- Шинкарь за гравикостюмы
		"info_artmod_night_star_gravi_zone",				-- 24 Ночная звезда из воронки 			-- Бес за ящик патронов
		"info_artmod_electra_moonlight_mincer",				-- 25 Лунный свет из карусели 			-- Шинкарь за ящик патронов
		"info_artmod_cristall_buzz",						-- 26 Кристалл из холодца     			-- Сахаров за бандуры-телепорты?
		"info_artmod_night_star_zharka",					-- 27 Ночная звезда из жарки 			-- Шинкарь за траву
		"info_artmod_electra_moonlight_galant",				-- 28 Душа из электры 					-- Любер за ПДА
		"info_artmod_rusty_sea-urchin_mosquito_bald",		-- 29 Морской ёж из трамплина 			-- Иванцов за что-то??
		"info_artmod_soul_gravi_zone",						-- 30 Душа из воронки 					-- Бармен за доки какие-то?
		"info_artmod_ameba_slug_mincer",					-- 31 Слюда из карусели 				-- записка в ТЧ/
		"info_artmod_night_star_buzz",						-- 32 Золотая рыбка из холодца 			-- Декодер Семёнову
		"info_artmod_electra_moonlight_zharka",				-- 33 Лунный свет из жарки 				-- Петренко за вспышку
		"info_artmod_gold_fish_galant",						-- 34 Золотая рыбка из электры 			-- Фанат за ноутбук
		"info_artmod_rusty_sea-urchin_ice"					-- 35 Морской ёж из снежки	 			-- Влад, рандом??
	},
	[ "lvl4" ] = { 			-- ПУСТЫШКИ --
		"info_artmod_dummy_dummy_mosquito_bald",			-- 36 Пустышка из трамплина 			-- Сахар, прибор на Кордоне
		"info_artmod_dummy_pellicle_gravi_zone",			-- 37 Пленка из воронки					-- Сахар, доки из х18
		"info_artmod_dummy_glassbeads_mincer",				-- 38 Мамины бусы из карусели			-- Бармен за какие-то доки?
		"info_artmod_dummy_battery_zharka",					-- 39 Батарейка из жарки				-- Бармен за какую-то лабу?
		"info_artmod_dummy_spring_galant",					-- 40 Пружина из электры 				-- Петренко за экзы
		"info_artmod_fuzz_kolobok_buzz"						-- 41 Колобок из холодца 				-- Семенов, арт Сидору
	},
	[ "lvl5" ] = { 			-- МОДИФИКАТЫ --
		"info_amk_recipt_souls_drops",						-- 42 Капли души 						-- Радар, по заданию Сахара
		"info_amk_recipt_tears_electra",					-- 43 Слёзы электры 	   -- Бром/Охотник/Сахар-контТД/Солдат-кейс
		"info_amk_recipt_dikoobraz",						-- 44 Дикобраз 							-- Семенов за зелёный арт.
		"info_amk_recipt_steel_kolobok",					-- 45 Стальной колобок     -- Бром/Охотник/Сахар-контТД/Солдат-кейс
		"info_amk_recipt_dummy_fire",						-- 46 Огненная пустышка 				-- Круглов, карты, болота
		"info_amk_recipt_shkura",							-- 47 Шкура 			   -- Бамажка в казарме на Кордоне
		"info_amk_recipt_grandmother_glassbeards"			-- 48 Бабкины Бусы  	   -- Бром/Охотник/Сахар-контТД/Солдат-кейс
	},
	[ "lvl6" ] = { 		-- МЕЗОМОДИФИКАТЫ --
		"info_amk_recipt_souls_fire",						-- 49 Огненная душа 					-- Санек за альбом
		"info_amk_recipt_tears_fire",						-- 50 Слёзы огня 						-- Сахар после х16
		"info_amk_recipt_electra_dikoobraz",				-- 51 Электрический дикобраз 			-- Иванцов плейбой
		"info_amk_recipt_titan_kolobok",					-- 52 Титановый колобок                 -- Матвеев?
		"info_amk_recipt_dummy_bright",						-- 53 Яркая пустышка            		-- Круглов, карты, ТЧ
		"info_amk_recipt_cheshya",							-- 54 Чешуя 							-- Волк за свой схрон
		"info_amk_recipt_pra_grandmother_glassbeards"		-- 55 Бусы прабабки 					-- Сидор за собак
	},
	[ "lvl7" ] = { 		-- ГИПЕРМОДИФИКАТЫ --
		"info_amk_recipt_souls_cristal",					-- 56 Кристальная душа 					-- Сахар за маятник?
		"info_amk_recipt_tears_chimaera",					-- 57 Слёзы химеры 						-- Шинкарь за 3 когтя
		"info_amk_recipt_sopl_dikoobraz",					-- 58 Сопливый дикобраз 				-- Влад
		"info_amk_recipt_almaz_kolobok",					-- 59 Алмазный колобок 					-- Круглов, ДТ
		"info_amk_recipt_dummy_moon",						-- 60 Лунная пустышка 					-- Круглов, карты, РЛ
		"info_amk_recipt_pancir",							-- 61 Панцирь 							-- Сидор за кейс с блока
		"info_amk_recipt_burer_grandmother_glassbeards"		-- 62 Бусы бабки бюрера 				-- Фанат, защита ДН
	},
	[ "lvl8" ] = { 			-- АБСОЛЮТЫ --
		"info_amk_recipt_souls_bengal",						-- 63 -Душа Бенгала 					-- Сахар за ботанов на Радаре
		"info_amk_recipt_tears_gigant",						-- 64 -Слеза гиганта 					-- Глузов, зелень из ТЧ
		"info_amk_recipt_stone_dikoobraz",					-- 65 -Каменный дикобраз 				-- Сканер в Лиманске
		"info_amk_recipt_giant_small_brother",				-- 66 -Младший брат гиганта     		-- Танк в РЛ
		"info_amk_recipt_dummy_puding",						-- 67 -Пудинг 						 	-- Бамажка в х16?
		"info_amk_recipt_controller_skalp",					-- 68 -Скальп контролёра 				-- Кеп за ПКМ?
		"info_amk_recipt_burer_pra_grandmother_glassbeards"	-- 69 -Бусы прабабки бюрера 			-- За Теслу
	}
}

local tbl_switcheable = {
	"wpn_aps",
	"wpn_beretta93",
	"wpn_mp5",
	"wpn_bizon",
	"wpn_pp19",
	"wpn_ump45",
	"wpn_ak",
	"wpn_rpk74",
	"wpn_abakan",
	"wpn_val",
	"wpn_groza",
	"wpn_vintorez",
	"wpn_sig550",
	"wpn_g36",
	"wpn_m16a4",
	"wpn_fn2000"
}

local k1 = amk_vars.r_task_reward or 1
local k2 = amk_vars.r_treas_items or 2
local f_sect, m_flag = "?", false

local tbl_med = {
	[ "bandage" 		] = 1500,
	[ "medkit"   		] = 3500,
	[ "medkit_army"  	] = 2500,
	[ "medkit_scientic" ] = 4500,
	[ "antirad" 		] = 2000,
}

local food_anim_time = {
	[ "bread" 		  	] = { 9000, 0.70, 0.3 },
	[ "kolbasa"		  	] = { 7500, 0.80, 0.4 },
	[ "suhpay"		  	] = { 3200, 0.00, 0.0 },
	[ "green_kolbasa" 	] = { 7500, 0.80, 0.4 },
	[ "conserva"	  	] = { 9000, 1.05, 0.6 },
	[ "vodka"		  	] = { 3500, 0.00, 0.0 },
	[ "energy_drink"  	] = { 4000, 0.00, 0.0 }
}

function spawn_holod_radio()
	local obj = alife():create( "radio_custom", sak.v3f( -133.7, 2.55, -277.8 ), 78753,  3377)
	if obj then
		obj.direction = sak.v3f( 0, -1.57, 0 )
		local pk = get_netpk( obj )
		local data = pk:get()
		data.custom_data = "[logic]\ncfg = scripts\\march_holod_priemnik.ltx"
		data.fixed_bones = "link"
		data.mass = 20
		pk:set( data )
	end
end 

function spawn_sultan_radio()
    local obj1 = g_sim:object( "bar_transiver" )
    if obj1 then misc.release_obj( obj1.id ) end
    local obj = alife():create( "radio_custom", sak.v3f( 75.3, 0.9, 102.7 ), 30900,  1222)
    if obj then
        obj.direction = sak.v3f( 0, -1.57, 0 )
        local pk = get_netpk( obj )
        local data = pk:get()
        data.custom_data = "[logic]\ncfg = scripts\\bar_sultan_priemnik.ltx"
        data.fixed_bones = "link"
        data.mass = 20
        pk:set( data )
    end
end

function add_codelock_on_seif_agro()
	local obj = g_sim:story_object( story_ids.agr_inventory_box_sak )
	if obj then
		local pk = get_netpk( obj )
		local data = pk:get()
		data.custom_data = "[logic]\ncfg = scripts\\ttt.ltx"
		pk:set( data )
	end
	if obj.online then
		alife():set_switch_online ( obj.id, false )
		alife():set_switch_offline( obj.id, true  )
		amk.convert_npc[ obj.id ] = 1
    end
end

function gg_have_this_bamazhka( sect )
	local tbl = xray_vars.load_table( nlc_vars, "tbl_pap", {} )
	if tbl ~= nil then
		misc.dump_table( tbl )
		for _, k in ipairs( tbl ) do
			if k == sect then return true end
		end
	end
	return false
end

function add_bamazhka_to_vars( sect )
	local tbl = xray_vars.load_table( nlc_vars, "tbl_pap", {} )
	--if tbl == nil then tbl = {} end -- не нужно, выше есть
	table.insert( tbl, sect )
	nlc_vars.tbl_pap = tbl
	misc.dump_table( tbl )
end

function belt_3_docent_task()
	local docent_txt = ""
	if k2 == 2 then
		docent_txt = "Мы тут с Длинным для производственных нужд своим отдельным генератором обзавестись решили. А то общий уже почти не тянет нагрузку. Ну и неплохо бы бензином для этого дела разжиться. Бармен говорил, сталкеры часто приносят в канистрах для обмена. Оказывается, где-то тут в округе заправки ещё остались, на которых можно накачать. С Болот ещё вроде кто-то приносил, хотя где там... Так вот ты эта - притащи нам штук пять канистр, полных, а? Чтобы, как генератор подвезут, сразу со старта запасец-то был какой-никакой. А я тебе за такое доброе дело пояс на три артефакта в обмен за твой двухсеточный подгоню."
	else
		docent_txt = "Про коллоидный газ в курсе? Красные баллоны такие небольшие, говорят, что попадается в Зоне. Завозили в тутошние секретные лабы для опытов каких-то, или даже делали здесь - хрен его знает. Так вот, недавно я в одном ПДА на интересную инфу наткнулся: где-то в Забугорьях какой-то учёный смастерил агрегат, позволяющую человеку заснуть, проспать сто-двести лет и проснуться почти в том же физическом состоянии, что и в момент засыпания. Прикинь? И вроде как для работы агрегата этот самый коллоидный газ и нужен, никак без него. Да вот засада - не достать его уже за Периметром. Делать разучились, или опасно сильно - тут уж не знаю. Короче, бывший хозяин ПДА как раз этот газ и собирал тут, для забугорного заказчика. Контакты там остались, я связался - походу и правда серьёзные деньги буржуй даёт за газ этот мерзкий.\nТак что давай так: найдёшь мне этих баллонов, штук шесть - получишь пояс на три артефакта в обмен на твой двухсеточный. Ну а если не устраивает, то гони арт, из пустышек."
	end
	db.actor:give_talk_message(
		"%c[255,216,186,140]" .. game.translate_string( docent_txt ),
		"ui\\ui_iconsTotal",
		Frect():set( 0, 0, 0, 0),
		"simple_answer_item"
    )
end

function belt_3_docent_task_have()
	if k2 == 2 then
		return sak.have_items_count( "amk_kanistra", 5 ) ~= false
	else
		return (
		    ( sak.have_items_count( "amk_ballon", 6 ) ~= false )
		    or sak_dialog.have_any_dart()
		)
	end
	return false
end

function belt_3_docent_task_transfer()
	if  k2 == 2 then
		sak_inventory.release_actor_items( "amk_kanistra", 5 )
	else
		if  sak.have_items_count( "amk_ballon", 6 ) ~= false then
			sak_inventory.release_actor_items( "amk_ballon", 6 )
		else
			sak_dialog.transfer_any_dart()
		end
	end
end

function get_target_obj()
	local RP = ray_pick( device().cam_pos, device().cam_dir, 100, rq_target.rqtBoth, db.actor )
	if RP:query() then return RP:get_object() end
end

function close_inventory()
	if db.actor:has_info( "ui_inventory" ) then
		level.start_stop_menu( level.main_input_receiver(), true )
	end
end

function anim_use_med( sect )
	-- для статистики -------------------------:
	if 		sect == "medkit" then
		xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_medkit_used_1" ), 1, 0 )
	elseif 	sect == "medkit_army" then
		xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_medkit_used_2" ), 1, 0 )
	elseif 	sect == "medkit_scientic" then
		xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_medkit_used_3" ), 1, 0 )
	elseif 	sect == "antirad" then
		xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_antirad_used" ), 1, 0 )
	end
	-------------------------------------------
	local med_pause = tbl_med[ sect ]
	if med_pause then
		schedule.add( "delay_close", "test.delay_close_inv()", 200 )
		sak.actor_hide_weapon()
		level.add_cam_effector( "camera_effects\\item_use.anm", 9773, false, "" )
		--sak.send_tip( sect, "Использовано:", 2, 20, "uniq", "sak", "green" )
		--sak.send_tip( tostring( med_pause ) .. " милисекунд", "На:", 2, 20, "uniq", "sak", "green" )
		schedule.add( "med_pause_time", "sak.restore_weap()", med_pause )
	end
end

function anim_eat_start( obj )
	m_flag = false
	level.remove_pp_effector ( 7849 )
	level.remove_cam_effector( 7850 )
	f_sect, f_id = obj:section(), obj:id()
	local f_cond = params.get_condition( obj, 0.99 )
	local t1, poison_chance = 200, 0
	if food_anim_time[ f_sect ] then
		if f_sect == "suhpay" then
			params.upd_condition( f_id, f_cond - 0.05 )
		end
		local f_tbl_cond = food_anim_time[ f_sect ][ 2 ]
		schedule.add( "delay_close", "test.delay_close_inv()", 200 )
		if vergas_masks.get_flag_mask() == true then
			t1 = 2000
			vergas_masks.on_off_mask()
			m_flag = true
		end
		schedule.add( "anim_eat", "test.anim_eat_middle()", t1 )
		if f_tbl_cond > 0.1 and f_tbl_cond > f_cond then
			poison_chance = f_tbl_cond - f_cond
			if lua_random() < poison_chance then
				timers.start_timer(
				  "do_poison_gg", lua_random( 15, 25 ), "test.food_poisoning()"
				)
			end
		end
	end
end

function food_poisoning()
	vergas_art.scheme_1()
	params.satiety_add( ( -0.3 - lua_random( 0.2, 0.6 ) ) )
end

function delay_close_inv()
	if db.actor:has_info( "ui_inventory" ) then
		sak.close_window()
	end
end

function anim_eat_middle()
	sak.actor_hide_weapon()
	if f_sect ~= "?" then
		misc.easy_sound( "scripts\\food\\inv_" .. f_sect )		-- NO_FEEDBACK
		level.add_cam_effector( "camera_effects\\item_use.anm", 9773, false, "" )
		if f_sect == "vodka" then
			if
				nlc_vars.vodka_psi_block == nil
				or nlc_vars.vodka_psi_block
			then
				nlc_vars.vodka_psi_block = true
				timers.start_timer(
				    "psi_block_gg", 0, 0, lua_random( 10, 15 ), "test.disable_psi_block()"
				)
			end
			sleep_manager.add_sleepiness( 25 )
			sleep_manager.test_for_need_sleep_vodka()
			-- для статистики:
			xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_vodka_drink" ), 1, 0 )
			--level.add_pp_effector( "snd_shock.ppe", 7849, false )
			--level.add_cam_effector( "camera_effects\\drunk.anm", 7850, false, "" )
		elseif f_sect == "energy_drink" then
			level.add_pp_effector( "brighten.ppe", 7851, true )
			sleep_manager.test_for_need_sleep_nrg()
			schedule.add( "end_br", "test.end_bright()", 30000 )
		end
		local ttime = food_anim_time[ f_sect ][ 1 ]
		schedule.add( "food_eat_end", "test.anim_eat_end()", ttime )
	end
end

function disable_psi_block()
	if nlc_vars.vodka_psi_block then nlc_vars.vodka_psi_block = nil end
end

function anim_eat_end()
	--level.remove_cam_effector( 9773 )
	if m_flag then
		vergas_masks.on_off_mask()
	else
		sak.restore_weap()
	end
end

function end_bright()
	level.remove_pp_effector( 7851 )
end

function garik_fix()
	if db.actor:has_info( "repair_starting" ) and not timers.check_timer( "fix_garik" ) then
		timers.start_timer( "fix_garik", 0, 0, 5, "test.bar_repair_force_end()" )
	end
end

function bar_repair_force_end()
	local a = db.actor
	if not a:has_info( "repair_end" ) then
		a:give_info_portion( "repair_end" )
		sak.send_tip(
			"Гарик, клиент не хочет свой фрэнч из химчистки забирать. \\nТы запомни эту рожу, на всякий случай...",
			"Долговязый:", 2, 20, "uniq", "sak", "red"
	    )
	end
end

function sms_recipt_found( info )
	local rec_name = ""
	for k, v in pairs( sak_artmods.artmod_resiepts ) do
		for i = 1, #v do
			if v[ i ] == info then
				rec_name = game.translate_string( sak_artmods.artmod_resiepts[ k ][ 7 ] )
			end
		end
	end
	for k, v in pairs( sak_artmods.amk_resiepts ) do
		for i = 1, #v do
			if v[ i ] == info then
				rec_name = game.translate_string( sak_artmods.amk_resiepts[ k ][ 3 ] )
			end
		end
	end
	if db.actor:has_info( info ) then
		sak.send_tip( rec_name, "Получен уже известный рецепт:", 2, 10, "artmod", "pda_news", "orange" )
	else
		sak.send_tip( rec_name, "Получен новый рецепт:", 2, 10, "artmod", "pda_news", "orange" )
	end
end

function rnd_rec_art_info( tbl, lvl, dyn )
	local tbl1 = tbl[ ( "lvl" .. tostring( lvl ) ) ]
	local info = tbl1[ dsh.get_next_random( "test.rec_art_info", 1, #tbl1 ) ] or ""
	if strposx( info, "af_" ) then
		if lvl <= 3 or lvl == 9 then
			if dyn == nil then
				info = info .. "_dyn" .. tostring( dsh.get_next_random( "test.rec_art_info", 1, 4 ) ) .. "d"  -- без зелени
			else
				info = info .. "_dyn" .. dyn .. "d"
			end
		end
	end
	return info
end

function give_rnd_recipt( r_lvl )
	local info = rnd_rec_art_info( tbl_recipt, r_lvl )
	sms_recipt_found( info )
	db.actor:give_info_portion( info )
end

function add_to_actor( sect, num )
	sak.create_items( db.actor, sect, num )
end

function add_rnd_art_to_actor( lvl, dyn )
	local sect = ""
	local test_lvl = tonumber( lvl )
	if dyn ~= nil then
		sect = rnd_rec_art_info( tbl_arts, test_lvl, dyn )
	else
		sect = rnd_rec_art_info( tbl_arts, test_lvl )
	end
	sak.create_items( db.actor, sect, 1 )
	return sect
end

function have_remove_tbl_item_cond( tbl, cond, flag_remove )
	--if tbl == nil then return end
	for i = 1, #tbl do
		for sect, id in pairs( sak_inventory.rucksack ) do
			if strposx( sect, tbl[ i ] ) then
				for m = 1, #id do
					if params.get_condition( id[ m ] , 0.99 ) > cond then
						if flag_remove == false then
							return true
						else
							misc.release_obj( id[ m ] )
            				sak.relocate_item( db.actor, "out", tbl[ i ], 1 )
            				return -- ?????
						end
					end
				end
			end
		end
	end
	if flag_remove == false then return false end
end

function cond_test()
	have_remove_tbl_item_cond( sak_rand_nagrad.table_amkdart, 0.9, true )
end

function have_remove_items_count_cond( section, amount, cond, flag_remove )
	local result = 0
	local tbl_to_remove = {}
	for sect, ids in pairs( sak_inventory.rucksack ) do
		if strposx( sect, section ) then
			for m = 1, #ids do
				if params.get_condition( ids[ m ], 0.999 ) > cond then
					result = result + 1
					if flag_remove and result <= amount then table.insert( tbl_to_remove, ids[ m ] ) end
				end
			end
		end
	end
	for sect, ids in pairs( sak_inventory.eatable ) do
		if strposx( sect, section ) then
			for m = 1, #ids do
				if params.get_condition( ids[ m ], 0.999 ) > cond then
					result = result + 1
					if flag_remove and result <= amount then table.insert( tbl_to_remove, ids[ m ] ) end
				end
			end
		end
	end
	--wprintf( "================================================================  RESULT:  " .. result )
	if flag_remove then
		for i = 1, #tbl_to_remove do
			misc.release_obj( tbl_to_remove[ i ] )
		end
		sak.relocate_item( db.actor, "out", section, #tbl_to_remove )
	else
		if result >= amount then return true end
		return false
	end
end

-- цена зарядки пда по торговцам с повышением через каждые 7 дней
function calc_pda_recharge_price( vendor )
	local day = timers.Get_Game_Days() or 1
	local price
	if vendor == "vergas" then price = 500 else price = 800 end
	return math.floor ( math.abs( price + math.floor( day / 7 ) * 1200 - ( 3 * db.actor:character_reputation() ) ) / 500 ) * 500
end

function show_pda_recharge_price( vendor )
	db.actor:give_talk_message(
		"\n%c[255,216,186,140]На сегодня зарядка ПДА будет стоить " .. calc_pda_recharge_price( vendor ) .. " рубликов.",
		"ui\\ui_iconsTotal",
		Frect():set( 0, 0, 0, 0),
		"simple_answer_item"
    )
end

function have_money_pda( vendor )
	return have_money( calc_pda_recharge_price( vendor ) )
end

function have_money( amount )
	return db.actor:money() >= amount
end

function give_money_pda( vendor )
	local amount = calc_pda_recharge_price( vendor )
	local actor  = db.actor
	actor:give_money( -amount )
	news_manager.relocate_money( actor, "out", amount )
end
-- 60 день репа 1662


-- отсырение спичек при дожде  +++ поломка пухи  -- Апдейт 6 игровых минут.
function fuckup_matches()
	local range = 9
	local lfactor = level.rain_factor()
	local RP = ray_pick ( db.actor:position(), vector():set( 0, 1, 0 ), 200, rq_target.rqtStatic, nil )
	if RP:query() then range = RP:get_distance() end
	--sak.send_tip( "Сила дождя: " .. lfactor ..  "    Расстояние над головой: ".. range , "", 2, 20, "uniq", "sak", "green" )
	if
		lfactor > 0.2 									-- идёт нормальный дождь
		and const.ground_levels[ level.name() ]         -- наземные уровни
		and range > 8                                   -- ГГ под открытым небом или дырявой крышей
		-- and not sleep_manager.is_sleep_active()
	then
		for sect, ids in pairs( sak_inventory.all_items ) do
			if sect == "matches" then
				for m = 1, #ids do
					if lua_random() < ( lfactor * 0.5 ) then
						sak.send_tip(
						    "От дождя спички отсырели.", "Да ё-моё...",
						    5, 15, "g_g", "sak", "red"
						)
						misc.release_obj( ids[ m ] )
						return
					end
				end
			end
		end
		-- для порчи активного оружия при дожде:
		if lua_random() < ( lfactor ) then
			local active_item = db.actor:active_item()
			if active_item then
				local active_sect = active_item:section()
				if not ( active_sect == "bolt"
				or active_sect == "wpn_knife"
				or active_sect == "wpn_knife_m1" )
				then
					local active_cond = params.get_condition( active_item, 0.99 )
					sak.send_tip( "Старое состояние: ".. active_cond , "", 1, 20, "uniq", "sak", "green" )
					if active_cond > 0.1 then
						params.upd_condition( active_item:id(), active_cond - 0.01 ) -- на 1 процент дамажим пуху
						active_cond = params.get_condition( active_item, 0.99 )
						sak.send_tip( "Новое состояние: ".. active_cond , "", 2, 20, "uniq", "sak", "green" )
					end
				end
			end
		end
	end
end

-- если радейка более 1.5 рентген, то заражаем жратву по таблице.       -- Апдейт 6 игровых минут.
function fuckup_food()
	if db.actor.radiation > 0.15 then
		for sect, ids in pairs( sak_inventory.eatable ) do
			if food_anim_time[ sect ] then
				for m = 1, #ids do
					if lua_random() < food_anim_time[ sect ][ 3 ] then
						sak.send_tip(
						    game.translate_string( system_ini():r_string( sect, "inv_name" ) ) ..
						    " теперь фонит, придётся выбросить...", "Вот чёрт...",
						    5, 15, "g_g", "sak", "red"
						)
						misc.release_obj( ids[ m ] )
						return
					end
				end
			end
		end
	end
end

function firemode_switch_try()
	local active_item = db.actor:active_item()
    if active_item then
    	local sect = active_item:section()
    	for i = 1, #tbl_switcheable do
    		if strposx( sect, tbl_switcheable[ i ] ) then
    			misc.easy_sound( "weapons\\firemode_switch" )
    			--чтобы не показывало статик, если он уже на экране??
    			if not disp_flag then bind_stalker.use_info() end
    			return
    		end
    	end
    end
end

function on_late_init()
	schedule.add( "do_eternal", "test.eternal_start()", 12000 )
 	local d_saved = get_death_count( "d_stor" ) or 0
 	local d_pda   = actor_stats.get_points( "stalkerkills" ) or 0
 	local d_diff  = d_saved - d_pda
 	local p_diff  = get_death_count( "p_stor" ) - get_death_count( "p_help" )
 	if d_diff > 0 then
 		xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_gg_deaths" ), d_diff, 1 )
 	end
 	if p_diff > 0 then
 		xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_saveloads_used" ), p_diff, 0 )
 	end
 	dsh.get_next_random( "sak.artmod" )  -- чтобы, зная, что будет следующей зелень по варке, не откатывались назад
 end

function get_death_count( what )
	local f = getFS()
	local flist = f:file_list_open_ex(
	    "$game_stats$", bit_or( FS.FS_ListFiles, FS.FS_RootOnly ),
	    "*." .. what
	)
	if flist:Size() > 0 then
		return tonumber( string.match( flist:GetAt( 0 ):NameFull(), "^(%d+)" ) )
	else
		local f1 = f:update_path( "$fs_root$", "fsgame.ltx" )
		local f2 = f:update_path( "$game_stats$", "0." .. what )
		f:file_copy( f1, f2 )
		return 0
	end
end

function set_death_count( what, value )
	local f = getFS()
	local fileName = (
	    f:file_list_open_ex( "$game_stats$",
	    bit_or( FS.FS_ListFiles, FS.FS_RootOnly ),
	    "*." .. what ):GetAt( 0 ):NameFull()
	    ) or ""
	local fileNameNew = ( tostring( value ) .. "." .. what ) or ""
	if fileNameNew ~= fileName then
		local f1 = f:update_path( "$game_stats$", fileName )
		local f2 = f:update_path( "$game_stats$", fileNameNew )
		f:file_rename( f1, f2, true )
	end
end

function on_new_game()
	get_death_count( "d_stor" )
	set_death_count( "d_stor", 0 )
	get_death_count( "p_stor" )
	set_death_count( "p_stor", 0 )
	get_death_count( "p_help" )
	set_death_count( "p_help", 0 )
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_blowouts_num" 		), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_arts_found_1" 		), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_arts_found_2" 		), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_arts_found_3" 		), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_arts_found_sem" 	), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_arts_found_uniq" 	), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_treas_found" 		), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_vodka_drink" 		), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_medkit_used_1" 	), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_medkit_used_2" 	), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_medkit_used_3" 	), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_antirad_used" 		), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_minigames_played" 	), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_minigames_won" 	), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_lc_used" 			), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_saveloads_used"	), 0, 0 ) --+
	xr_statistic.add_pts( "stalkerkills", game.translate_string( "st_pda_gg_deaths" 		), 0, 0 ) --+
end

function add_art_to_vars( id )
	if id ~= nil then
		local lname = level.name()
		local tbl = xray_vars.load_table( nlc_vars, "tbl_bio_art", {} )
		if tbl[ lname ] == nil then tbl[ lname ] = {} end
		table.insert( tbl[ lname ], id )
		nlc_vars.tbl_bio_art = tbl
	end 
end

function art_is_bio_art( id )
	local lname = level.name()
	local tbl = xray_vars.load_table( nlc_vars, "tbl_bio_art", {} )
	if tbl ~= nil then
		--misc.dump_table( tbl )                         -- TODO выключить нах
		for k, v in pairs( tbl ) do
			if k == lname then
				for i = 1, #v do
					if id == v[ i ] then 
						v[ i ] = -1
						nlc_vars.tbl_bio_art = tbl
						--misc.dump_table( tbl )         -- TODO выключить нах
						return true
					end
				end
			end
		end
	end
	return false
end

function haldle_art_for_stats( sect, id )
	if nlc_vars.semart_id and id == nlc_vars.semart_id	then 	-- арт Семецкого
		xr_statistic.add_pts( "stalkerkills",
							game.translate_string( "st_pda_arts_found_sem" ), 1, 0
		)
	end
	if art_is_bio_art( id ) then      							-- арт природный, не сваренный
		for k, v in pairs( tbl_arts ) do
			for i = 1, #v do
				if strposx( sect, v[ i ] ) then
					if k == "lvl1" then  						-- арт 1 уровня
						xr_statistic.add_pts( "stalkerkills",
							game.translate_string( "st_pda_arts_found_1" ), 1, 0
						)
					elseif k == "lvl2" then  					-- арт 2 уровня
						xr_statistic.add_pts( "stalkerkills",
							game.translate_string( "st_pda_arts_found_2" ), 1, 0
						)
					elseif k == "lvl9" or k == "lvl10" then  	-- арт - капсула
						xr_statistic.add_pts( "stalkerkills",
							game.translate_string( "st_pda_arts_found_3" ), 1, 0
						)
					elseif k == "lvl11" then  					-- арт - уник
						xr_statistic.add_pts( "stalkerkills",
							game.translate_string( "st_pda_arts_found_uniq" ), 1, 0
						)		
					end
				end
			end
		end
	end
end

function count_actor_ammo( section )
	-- local count_inv  = 0
	-- for i = 0, db.actor:object_count() - 1 do
	-- 	local obj = db.actor:object( i )    
	-- 	if razgruzka.check_obj( obj ) then
	-- 		local sect = obj:section() 
	-- 		local add  = 0
	-- 		if strposx( sect, section ) then add = 1 end
	-- 		if razgruzka.is_ammo( sect ) then
	-- 			count_inv = count_inv + nlc_container.amount_in_batch( obj ) * add
	-- 		else
	-- 			count_inv = count_inv + add
	-- 		end
	-- 	end
	-- end
	local count = 0
	local rukzak = get_shadow_inv():hidden_items( true )
    for sect, cnt in rukzak:pairs() do
        if strposx( sect, section ) then count = count + cnt end
    end
	return count
end

function spawn_docent_lampada()
	dsh.create_candle( vector():set( 120.674, -4.398, 12.6 ), 34637, 1239, "new_item\\gas_burner" )
end

function add_soul()
  local sect = test.add_rnd_art_to_actor( 3, 4 ) 
  nlc_vars.gluzov_art_given = sect:gsub('_dyn[1-5]d', '')
end

function isBarterAvailable( treshold, npc_koeff )
	local day = timers.Get_Game_Days() or 1
	if day > 45 then day = 45 end
	local chance = dsh.get_fixed_random( "test.isBarterAvailable." .. npc_koeff, day, ( 80 - day ), 100 )
	wprintf( "----------CHANSE: "..chance.." --------- TRESHOLD: "..treshold.. " -------- DAY: "..day.." ------ npc_koeff: ".. npc_koeff )
	if chance >= treshold then return true end
    return false
end

function noBarterAvailable( treshold, npc_koeff )
  return not isBarterAvailable( treshold, npc_koeff )
end

function make_shron_voron( item_sect )
	local tbl_pos = { 
		[ "notebook_of_artist" ] = {             -- блокнот художника
			"agru_secret_box_bloodsucker",
			"agr_secret_stump",
			"lost_secret_0000",
			"esc_secret_safe_farm"
		},
		[ "bandit_master_outfit_m1" ] = {        -- плащ Крысюка
			"mar_secret_0001",
			"mar_secret_0002",
			"bar_secret_0008",
			"ros_secret_0010"
		},
		[ "outfit_specnaz_m1" ] = {              -- лечебный Берилл
			"ros_secret_0011",
			"esc_secret_refuge",
			"mar_secret_0023",
			"lost_secret_0009"
		},
		[ "soldier_outfit" ] = {                 -- гравикостюм
			"red_secret_0006",
			"mar_secret_0052",
			"ros_secret_0011",
			"agr_secret_inventory_schlosser"
		},
		[ "klava" ] = {                          -- книжка Вергаса
			"esc_secret_tree",
			"esc_secret_truck_goods",
			"mar_secret_0059",
			"mar_secret_0065"
		},
		[ "outfit_stalker_m1" ] = {              -- костюм Призрака
			"mar_secret_0010",
			"agr_secret_roof_box",
			"lim_secret_0001",
			"bar_secret_0018"
		},
		[ "ventilator_01" ] = {                  -- вечный Вентилятор       -- в х16, по декодеру Круглова
			"mar_secret_0037",
			"agr_secret_tube_radiactive",
			"lost_secret_0001",
			"mil_secret_0005"
		},
		[ "kartina04" ] = {                      -- картина из х18          -- в х18, по записям Сахарова
			"dsc_secret_0005",
			"lost_secret_0012",
			"ros_secret_0014",
			"mar_secret_0003"
		},
		[ "item_psi_helmet_01" ] = {             -- пси-шлем Стрелка        -- в х8, ????????
			"yan_secret_0009",
			"x16_secret_0000",
			"red_secret_0001",
			"gen_secret_0003"
		}
	}
	-- klyk_pribor_1c    -- прибор Клыка
	treasure_manager.get_treasure_manager():give_treasure(
	    tbl_pos[ item_sect ][ dsh.get_next_random( "test.make_shron_voron", 1, 4 ) ]
	)
end

function add_item_psi_helmet_01()
	if dsh.get_next_random( "test.make_shron_voron" ) < 0.8 then
		local u_obj = amk.spawn_item( "item_psi_helmet_01", sak.v3f( -47.9118, -10.75519, -178.83305 ), 2993, 3051 )
		if u_obj then
		local pk         = get_netpk( u_obj, 1 )
		local data       = pk:get()
		data.physic_type = 3
		pk:set( data )
		end
	end
end

function check_monster_part_march_restore()
	if nlc_vars.monster_part_march_restore == nil then return true end
	return false
end

function check_monster_part_march_restore_exist()
	if nlc_vars.monster_part_march_restore ~= nil then return true end
	return false
end

function check_for_march_restore( section, flag )
	if
		    sak.have_items_count( section, 1 ) ~= false
		and sak.have_items_count( "banka_full", 1 ) ~= false
		and sak_dialog.gg_n_bart_have( 2 )
	then
		if not flag then
			return true
		else
			sak_inventory.release_actor_items( section, 1 )
			sak_inventory.release_actor_items( "banka_full", 1 )
			sak_dialog.give_n_bart( 2 )
			nlc_vars.monster_part_march_restore = section
			timers.start_timer(
				    "march_monster_part_restore", 1, 0, 0, "test.march_monster_part_restore_end()"
				)
		end
	end
	return false
end

function march_monster_part_restore_end()
	sak.send_tip( "Меченный, твоя запчасть готова, подваливай.", "Сообщение от Пахома:", 2, 20, "uniq", "sak", "green" )
	timers.start_timer(
		"march_monster_part_restore_end_timer", 1, 0, 0, "test.march_monster_part_restore_end_timer()"
	)
end

function march_monster_part_restore_end_timer()
	sak.send_tip( "Меченный, твоя запчасть ушла в фонд развития науки. Я предупреждал.", "Сообщение от Пахома:", 2, 20, "uniq", "sak", "red" )
	nlc_vars.monster_part_march_restore = nil
end

function give_march_monster_part_restored()
	add_to_actor( nlc_vars.monster_part_march_restore or "mutant_burer_hand", 1 )
	timers.stop_timer( "march_monster_part_restore_end_timer" )
	nlc_vars.monster_part_march_restore = nil
end

function check_monster_part_march_timer()
	return not timers.check_timer( "march_monster_part_restore" )
end

function anomaly_near( tobj )
	local flag     = false
	local ids, cnt = registry.clsid_objects( CLID_ZONE_BURNING_FUZZ, CLID_ZONE_AMEBA, true, nil, 7 )
	for n = 1, cnt do
		local id  = ids[ n ]
		local obj = client_obj( id )
		if obj then
			local t_pos = tobj:position()
			local pos   = obj:position()
			if pos:distance_to( t_pos ) < 5 then
				flag = true
				break
			end
		end
	end
	return flag
end

function anomaly_near2( tobj )
	local id, pos, radius, dist = amk_anoms.get_nearest_anomaly( tobj )
	if id and dist < 2 then
		if not strposx( client_obj( id ):section(), "radioactive" ) then
			return true
		end
	end
	return false
end

function update_sleep_icon( mode )
	local color = { 0, 0, 0, 0 }
	if     mode == 4 then color = { 160, 150, 150, 255 } 
	elseif mode == 3 then color = { 120, 255, 255, 0   } 
	elseif mode == 2 then color = {  80, 255, 255, 150 }
	elseif mode == 1 then color = {  40, 255, 255, 255 }
	elseif mode == 0 then color = {   0,   0,   0,   0 }
	end
	local hud    = get_hud()
	local static = hud:GetCustomStatic( "sleep_icon_nlc" )
	if static then
    	hud:RemoveCustomStatic( "sleep_icon_nlc" )
	end
	static = hud:AddCustomStatic( "sleep_icon_nlc", true ):wnd()
	static:SetColor( GetARGB( unpack( color ) ) )
end

function eternal_start()
	if nlc_vars.semeneckyi_done then return end
	local delay = lua_random( 30, 300 )
	if not timers.check_timer( "semeneckyi_timer" ) then
		timers.start_timer( "semeneckyi_timer", 0, 0, delay, "news_main.do_eternal_stalker()" )
		wprintf( "@-------------------------------------  SEMECKY TIMER STARTED TO "..delay.."  min" )
	else
		timers.stop_timer( "semeneckyi_timer" )
		timers.start_timer( "semeneckyi_timer", 0, 0, delay, "news_main.do_eternal_stalker()" )
		wprintf( "@-------------------------------------  SEMECKY TIMER STOP-STARTED TO "..delay.."  min" )
	end
end

function spawn_no_ai( spawn_item, pos, gv, lv )
	local obj = alife():create( spawn_item, pos, lv, gv )
	obj       = alife():object( obj.id )
	local pk  = get_netpk( obj, 1 )
	if pk:isOk() then
		local data        = pk:get()
		data.object_flags = bit_and( data.object_flags, bit_not( 128 ) )
		pk:set( data )
		end
	return obj
end

function use_ai_locations( obj )       -- перенести в g.script ????
	local sobj = alife():object( obj.id )
	local pk   = get_netpk( sobj, 1 )
	if pk:isOk() then
		local data        = pk:get()
		data.object_flags = bit_and( data.object_flags, bit_not( 128 ) )
		pk:set( data )
	end
end

function add_scarman_habar()
	local ind       = amk_vars.r_task_reward or 2
	local ind_habar = amk_vars.r_treas_items or 1
	local tbl       = { 
		{  56.603, -2.8180,   11.557, 3013, 53606 },
		{  14.191, -1.4650, -106.612, 3002, 33484 },
		{ -34.687, -3.7060, -202.182, 2990, 9369  },
		{  19.803,  3.6930, -269.262, 3012, 35918 },
		{ -19.920,  5.1954, -302.300, 3009, 16001 }
	}
	local tbl_habar = { 
		{
			"af_dummy_buliz",
			"ammo_8.6x70_ap",
			"ammo_8.6x70_ap",
			"wpn_addon_acog"
		},
		{
			"af_kol_1",
			"ammo_9x39_ap",
			"ammo_9x39_ap",
			"ammo_9x39_ap",
			"ammo_9x39_ap",
			"ammo_9x39_ap",
			"repair_item_weapon_feik",
			"repair_item_weapon_feik",
			"medkit_scientic",
			"medkit_scientic"

		},
		{
			"af_spirit_1",
			"ammo_7.62x54_7h14",
			"ammo_7.62x54_7h14",
			"ammo_7.62x54_7h14",
			"ammo_7.62x54_7h14",
			"repair_itemoutfit_feik",
			"repair_itemoutfit_feik",
			"medkit_scientic",
			"medkit_scientic"
		}
	}
	local obj = spawn_no_ai(
	                "rukzak_inventory_box",
	                sak.v3f( tbl[ ind ][ 1 ], tbl[ ind ][ 2 ], tbl[ ind ][ 3 ] ),
	                tbl[ ind ][ 4 ], tbl[ ind ][ 5 ]
	            )
	if obj then
		local obj1 = g_sim:object( obj.id )
		for _, v in ipairs( tbl_habar[ ind_habar ] ) do
			g_sim:create(
				v,
				obj1.position,
				obj1.m_level_vertex_id,
				obj1.m_game_vertex_id,
				obj1.id
			)
		end
		if obj1.online then
			g_sim:set_switch_online ( obj1.id, false )
			g_sim:set_switch_offline( obj1.id, true  )
			amk.convert_npc[ obj1.id ] = 1
		end
	end
end

function scarman_sms()
	sak.send_tip( "'Галиматья какая-то. Слова, снизу цифры, типа ключ. Цифр вроде в 2 раза больше, чем слов.'", "В ПДА добавлена статья:", 0, 10, "uniq", "sak", "orange" )
end
