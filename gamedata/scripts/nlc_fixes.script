local processed_info = {}
--local vname          = "fixes.version"

function on_late_init()
    local fixes = {
        this.fix_tiski_mil_dv,
    }
    local stored_fixes_num = nlc_vars.fixes_num or 0
    log2(
        "[nlc_fixes]: fixes_done = %s, fixes_all = %s",
        stored_fixes_num, table.getn( fixes )
    )
    if stored_fixes_num < table.getn( fixes ) then
        for i = stored_fixes_num + 1, table.getn( fixes ) do
            fixes[ i ]( stored_fixes_num )
        end
        nlc_vars.fixes_num = table.getn( fixes )
    end
    ----------------------------------------------------------------------------------
    --local fixes_on_info = {}
                --   local fixes_on_info = {
                -- [ "vitamin_reyd_zadan_done" ] = {
                --   this.free_warlab_svobodovzu,
                -- },
                -- [ "borman_glushitel_done" ] = {
                --   this.free_freedom_limansk,
                -- },
    -- for k, v in pairs( fixes_on_info ) do
    --     if db.actor:has_info( k ) and not processed_info[ k ] then
    --         log2( "[nlc_fixes]: found fixes for '%s', applying...", k )
    --         for _, f in ipairs( v ) do
    --             f()
    --             processed_info[ k ] = true
    --             local processed = xray_vars.load_table( nlc_vars, "fixes_processed_info", {} )
    --             table.insert( processed, k )
    --             nlc_vars.fixes_processed_info = processed
    --         end
    --     end
    -- end
    --------------------------------------------------------------------------------
end

function fix_tiski_mil_dv()
    for _, v in ipairs( { "mil_tiski_repair_03", "val_tiski_repair" } ) do
        local sobj = g_sim:object( v )
        if sobj then
            local pk         = get_netpk( sobj, 1 )
            local data       = pk:get()
            data.custom_data = "[logic]\ncfg = scripts\\repair_tiski_3.ltx"
            pk:set( data )
            sak.off_on( sobj )
        end
    end
end